// Code generated by protoc-gen-gogo.
// source: lsd.proto
// DO NOT EDIT!

/*
	Package lsd is a generated protocol buffer package.

	It is generated from these files:
		lsd.proto

	It has these top-level messages:
		RequestNewEvents
		ResponseOffsets
		ResponseGeneric
*/
package lsd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestMsgid int32

const (
	RequestMsgid_REQUEST_NEW_EVENTS RequestMsgid = 1
)

var RequestMsgid_name = map[int32]string{
	1: "REQUEST_NEW_EVENTS",
}
var RequestMsgid_value = map[string]int32{
	"REQUEST_NEW_EVENTS": 1,
}

func (x RequestMsgid) Enum() *RequestMsgid {
	p := new(RequestMsgid)
	*p = x
	return p
}
func (x RequestMsgid) String() string {
	return proto.EnumName(RequestMsgid_name, int32(x))
}
func (x *RequestMsgid) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestMsgid_value, data, "RequestMsgid")
	if err != nil {
		return err
	}
	*x = RequestMsgid(value)
	return nil
}

type ResponseMsgid int32

const (
	ResponseMsgid_RESPONSE_GENERIC ResponseMsgid = 1
	ResponseMsgid_RESPONSE_OFFSETS ResponseMsgid = 2
)

var ResponseMsgid_name = map[int32]string{
	1: "RESPONSE_GENERIC",
	2: "RESPONSE_OFFSETS",
}
var ResponseMsgid_value = map[string]int32{
	"RESPONSE_GENERIC": 1,
	"RESPONSE_OFFSETS": 2,
}

func (x ResponseMsgid) Enum() *ResponseMsgid {
	p := new(ResponseMsgid)
	*p = x
	return p
}
func (x ResponseMsgid) String() string {
	return proto.EnumName(ResponseMsgid_name, int32(x))
}
func (x *ResponseMsgid) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResponseMsgid_value, data, "ResponseMsgid")
	if err != nil {
		return err
	}
	*x = ResponseMsgid(value)
	return nil
}

type Errno int32

const (
	Errno_ERRNO_GENERIC Errno = 1
)

var Errno_name = map[int32]string{
	1: "ERRNO_GENERIC",
}
var Errno_value = map[string]int32{
	"ERRNO_GENERIC": 1,
}

func (x Errno) Enum() *Errno {
	p := new(Errno)
	*p = x
	return p
}
func (x Errno) String() string {
	return proto.EnumName(Errno_name, int32(x))
}
func (x *Errno) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Errno_value, data, "Errno")
	if err != nil {
		return err
	}
	*x = Errno(value)
	return nil
}

type RequestNewEvents struct {
	Events           []*RequestNewEventsEventT `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *RequestNewEvents) Reset()         { *m = RequestNewEvents{} }
func (m *RequestNewEvents) String() string { return proto.CompactTextString(m) }
func (*RequestNewEvents) ProtoMessage()    {}

func (m *RequestNewEvents) GetEvents() []*RequestNewEventsEventT {
	if m != nil {
		return m.Events
	}
	return nil
}

type RequestNewEventsEventT struct {
	Category         *string  `protobuf:"bytes,1,req,name=category" json:"category,omitempty"`
	Inode            *uint64  `protobuf:"varint,2,req,name=inode" json:"inode,omitempty"`
	Offset           *uint64  `protobuf:"varint,3,req,name=offset" json:"offset,omitempty"`
	Lines            []string `protobuf:"bytes,4,rep,name=lines" json:"lines,omitempty"`
	IsCompressed     *bool    `protobuf:"varint,5,opt,name=is_compressed,def=0" json:"is_compressed,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RequestNewEventsEventT) Reset()         { *m = RequestNewEventsEventT{} }
func (m *RequestNewEventsEventT) String() string { return proto.CompactTextString(m) }
func (*RequestNewEventsEventT) ProtoMessage()    {}

const Default_RequestNewEventsEventT_IsCompressed bool = false

func (m *RequestNewEventsEventT) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *RequestNewEventsEventT) GetInode() uint64 {
	if m != nil && m.Inode != nil {
		return *m.Inode
	}
	return 0
}

func (m *RequestNewEventsEventT) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *RequestNewEventsEventT) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *RequestNewEventsEventT) GetIsCompressed() bool {
	if m != nil && m.IsCompressed != nil {
		return *m.IsCompressed
	}
	return Default_RequestNewEventsEventT_IsCompressed
}

type ResponseOffsets struct {
	Offsets          []*ResponseOffsetsOffsetT `protobuf:"bytes,1,rep,name=offsets" json:"offsets,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ResponseOffsets) Reset()         { *m = ResponseOffsets{} }
func (m *ResponseOffsets) String() string { return proto.CompactTextString(m) }
func (*ResponseOffsets) ProtoMessage()    {}

func (m *ResponseOffsets) GetOffsets() []*ResponseOffsetsOffsetT {
	if m != nil {
		return m.Offsets
	}
	return nil
}

type ResponseOffsetsOffsetT struct {
	Inode            *uint64 `protobuf:"varint,1,req,name=inode" json:"inode,omitempty"`
	Offset           *uint64 `protobuf:"varint,2,req,name=offset" json:"offset,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResponseOffsetsOffsetT) Reset()         { *m = ResponseOffsetsOffsetT{} }
func (m *ResponseOffsetsOffsetT) String() string { return proto.CompactTextString(m) }
func (*ResponseOffsetsOffsetT) ProtoMessage()    {}

func (m *ResponseOffsetsOffsetT) GetInode() uint64 {
	if m != nil && m.Inode != nil {
		return *m.Inode
	}
	return 0
}

func (m *ResponseOffsetsOffsetT) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

type ResponseGeneric struct {
	ErrorCode        *int32  `protobuf:"zigzag32,1,req,name=error_code" json:"error_code,omitempty"`
	ErrorText        *string `protobuf:"bytes,2,opt,name=error_text" json:"error_text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResponseGeneric) Reset()         { *m = ResponseGeneric{} }
func (m *ResponseGeneric) String() string { return proto.CompactTextString(m) }
func (*ResponseGeneric) ProtoMessage()    {}

func (m *ResponseGeneric) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *ResponseGeneric) GetErrorText() string {
	if m != nil && m.ErrorText != nil {
		return *m.ErrorText
	}
	return ""
}

func init() {
	proto.RegisterEnum("lsd.RequestMsgid", RequestMsgid_name, RequestMsgid_value)
	proto.RegisterEnum("lsd.ResponseMsgid", ResponseMsgid_name, ResponseMsgid_value)
	proto.RegisterEnum("lsd.Errno", Errno_name, Errno_value)
}
func (m *RequestNewEvents) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovLsd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestNewEventsEventT) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = len(*m.Category)
		n += 1 + l + sovLsd(uint64(l))
	}
	if m.Inode != nil {
		n += 1 + sovLsd(uint64(*m.Inode))
	}
	if m.Offset != nil {
		n += 1 + sovLsd(uint64(*m.Offset))
	}
	if len(m.Lines) > 0 {
		for _, s := range m.Lines {
			l = len(s)
			n += 1 + l + sovLsd(uint64(l))
		}
	}
	if m.IsCompressed != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseOffsets) Size() (n int) {
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		for _, e := range m.Offsets {
			l = e.Size()
			n += 1 + l + sovLsd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseOffsetsOffsetT) Size() (n int) {
	var l int
	_ = l
	if m.Inode != nil {
		n += 1 + sovLsd(uint64(*m.Inode))
	}
	if m.Offset != nil {
		n += 1 + sovLsd(uint64(*m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseGeneric) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != nil {
		n += 1 + sozLsd(uint64(*m.ErrorCode))
	}
	if m.ErrorText != nil {
		l = len(*m.ErrorText)
		n += 1 + l + sovLsd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLsd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLsd(x uint64) (n int) {
	return sovLsd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestNewEvents) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestNewEvents) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			data[i] = 0xa
			i++
			i = encodeVarintLsd(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestNewEventsEventT) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestNewEventsEventT) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("category")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintLsd(data, i, uint64(len(*m.Category)))
		i += copy(data[i:], *m.Category)
	}
	if m.Inode == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("inode")
	} else {
		data[i] = 0x10
		i++
		i = encodeVarintLsd(data, i, uint64(*m.Inode))
	}
	if m.Offset == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("offset")
	} else {
		data[i] = 0x18
		i++
		i = encodeVarintLsd(data, i, uint64(*m.Offset))
	}
	if len(m.Lines) > 0 {
		for _, s := range m.Lines {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.IsCompressed != nil {
		data[i] = 0x28
		i++
		if *m.IsCompressed {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseOffsets) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseOffsets) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		for _, msg := range m.Offsets {
			data[i] = 0xa
			i++
			i = encodeVarintLsd(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseOffsetsOffsetT) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseOffsetsOffsetT) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("inode")
	} else {
		data[i] = 0x8
		i++
		i = encodeVarintLsd(data, i, uint64(*m.Inode))
	}
	if m.Offset == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("offset")
	} else {
		data[i] = 0x10
		i++
		i = encodeVarintLsd(data, i, uint64(*m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseGeneric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseGeneric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("error_code")
	} else {
		data[i] = 0x8
		i++
		i = encodeVarintLsd(data, i, uint64((uint32(*m.ErrorCode)<<1)^uint32((*m.ErrorCode>>31))))
	}
	if m.ErrorText != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLsd(data, i, uint64(len(*m.ErrorText)))
		i += copy(data[i:], *m.ErrorText)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Lsd(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lsd(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLsd(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RequestNewEvents) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsdUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: request_new_events: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: request_new_events: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &RequestNewEventsEventT{})
			if err := m.Events[len(m.Events)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsdUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestNewEventsEventT) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsdUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: event_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: event_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Category = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inode = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offset = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lines = append(m.Lines, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompressed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCompressed = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLsdUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("category")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("inode")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("offset")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOffsets) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsdUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: response_offsets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: response_offsets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offsets = append(m.Offsets, &ResponseOffsetsOffsetT{})
			if err := m.Offsets[len(m.Offsets)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsdUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOffsetsOffsetT) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsdUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: offset_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: offset_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offset = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipLsdUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("inode")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("offset")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGeneric) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsdUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: response_generic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: response_generic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ErrorCode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ErrorText = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsdUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLsdUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("error_code")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLsdUnsafe(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLsdUnsafe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsdUnsafe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLsdUnsafe
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLsdUnsafe
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLsdUnsafe(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLsdUnsafe = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLsdUnsafe   = fmt.Errorf("proto: integer overflow")
)
